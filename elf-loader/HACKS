* DT_STRTABには何が入っているのか
  - シンボル名（Sym.st_name）
  - ロードする共有オブジェクト（DT_NEEDED Dyn.d_un.d_val）

* DYNAMICセグメントとセクションの対応
  DT_STRTAB: .dynstr（文字列テーブルのアドレス）
  DT_SYMTAB: .dynsym（シンボルテーブルのアドレス）
  DT_STRSZ: 文字列テーブルの総バイト数
  DT_SYMENT: 各シンボルテーブルエントリのサイズ

  DT_PLTGOT: .got.plt（GOTのアドレス）
  DT_JMPREL: .rela.plt（GOTの再配置テーブルのアドレス）
             要素数は， DT_PLTREL == DT_RELAのとき，DT_PLTRELSZ / DT_RELAENT
                        DT_PLTREL == DT_REL のとき，DT_PLTRELSZ / DT_RELENT
  DT_PLTREL: .rela.pltに入っている型（DT_RELまたはDT_RELA）
  DT_PLTRELSZ: .rela.pltの総バイト数

  DT_RELA: .rela.dyn（再配置テーブルのアドレス）
           要素数は，DT_RELASZ / DT_RELAENTで求められる
  DT_RELASZ: 再配置テーブルの総バイト数
  DT_RELAENT: 再配置テーブルの各エントリのサイズ

  DT_HASH: .hash

------------------------------------------------------------
* How to use global variables

DEFINE (var.c):
  int global = 'I';
  extern int _global
      __attribute__ ((alias ("global"), visibility ("hidden")));

HEADER:
  extern int _global __attribute__ ((visibility("hidden")));

USE:
  _global

- How to use global function
DEFINE:
  void f(void) { }

HEADER:
  extern int f(void) __attribute__ ((visibility("hidden")));

------------------------------------------------------------
* How to compile glibc-2.9

  % mkdir /tmp/glibc-obj
  % cd /tmp/glibc-obj
  % ~/src/glibc-2.9/configure \
      --disable-sanity-checks \
      --without-xcoff \
      --without-cvs \
      --without-binutils \
      --without-fp \
      --without-selinux

Then, dynamic loader at /tmp/glibc-obj/elf/ld.so
